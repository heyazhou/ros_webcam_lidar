<launch>

  <arg name="gazebo_gui" default="false"/>
  <arg name="load_world" default="true"/>
  <arg name="model" default="$(find webcam_lidar)/urdf/webcam_lidar.xacro"/>

  <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />

  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" args="-z 0.0 -unpause -urdf -model webcam_lidar -param robot_description" respawn="false" output="screen" />
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find webcam_lidar)/world/practice.world" if="$(arg load_world)"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="$(arg gazebo_gui)"/>
    <arg name="headless" value="false"/>
    <arg name="recording" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <node pkg="webcam_lidar" type="soft_color_filter" name="color_filter_node">
    <rosparam file="$(find webcam_lidar)/params/color_filter.yaml"/>
    <param name="camera_topic" value="/head_camera/image_raw"/> <!-- raw camera image -->
    <param name="headless" value="false"/> <!-- display raw feed and color filtered video windows -->
    <param name="strobed_mode" value="false"/> <!-- use only if every second frame is illuminated -->
  </node>

  <node pkg="webcam_lidar" type="webcam_lidar" name="triangulation_node">
    <rosparam file="$(find webcam_lidar)/params/lidar_intrinsic.yaml"/>
    <param name="use_tf" value="true"/> <!-- get camera to laser transformation from tf -->
    <param name="camera_topic" value="/webcam_lidar/image_filtered"/> <!-- color filtered image topic -->
    <param name="webcam_lidar_frame" value="lidar_link"/> <!-- pointcloud projection frame -->
    <param name="camera_frame" value="head_camera"/> <!-- used for camera to laser transformation if use_tf is set true -->
    <param name="laser_frame" value="laser_frame"/> <!-- used for camera to laser transformation if use_tf is set true -->
  </node>

  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find webcam_lidar)/rviz/webcam_lidar.rviz" />

</launch>
